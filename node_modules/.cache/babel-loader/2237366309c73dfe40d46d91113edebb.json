{"ast":null,"code":"var _jsxFileName = \"/Users/sauhilfaraz/Desktop/Launch Training/notes-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport './Notes.js';\nimport Notes from './Notes.js';\n/* \nManage four variables with state:\n\"title, note, titleList, and noteList\"\n\nUse the titleList and noteList to keep track of and save\nall the notes the user writes down so we can display them\n*/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getNotes = e => {\n      // let newNote = e.target.value; // Assigns the value of the 'e' parameter to 'newNote'\n      this.setState({\n        currentNote: {\n          note: e.target.value\n        }\n      });\n    };\n\n    this.getTitle = e => {\n      // let newTitle = e.target.value; // Assigns the value of the 'e' parameter to 'newTitle'\n      this.setState({\n        currentNote: {\n          title: e.target.value\n        }\n      });\n    };\n\n    this.addNote = e => {\n      e.preventDefault();\n      const newItem = this.state.currentNote;\n      console.log(newItem);\n\n      if (newItem.title !== \"\" && newItem.note !== \"\") {\n        const items = [...this.state.items, newItems];\n        this.setState({\n          items: newItems,\n          currentNote: {\n            title: \"\",\n            note: \"\"\n          }\n        });\n      }\n    };\n\n    this.saveNote = () => {\n      if (this.state.title !== \"\" && this.state.note !== \"\") {\n        this.setState({\n          titleList: [this.state.titleList, this.state.title],\n          noteList: [this.state.noteList, this.state.note]\n        }); // this.setState({ noteList: [this.state.noteList, this.state.note] })\n      }\n    };\n\n    this.clearNote = () => {\n      if (this.state.note !== \"\") {\n        this.setState({\n          note: \"\",\n          title: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      items: [],\n      currentNote: {\n        title: \"\",\n        note: \"\"\n      }\n    };\n    this.getNotes = this.getNotes.bind(this);\n    this.getTitle = this.getTitle.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, \" Notes Application \"), /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \" Title \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"textArea\",\n      value: this.state.title,\n      onChange: e => this.getTitle(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"textarea\", {\n      id: \"noteArea\",\n      value: this.state.note,\n      onChange: e => this.getNotes(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: () => this.saveNote(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, \"Save Note\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: () => this.clearNote(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, \"Clear Note\")), /*#__PURE__*/React.createElement(Notes, {\n      title: this.state.titleList,\n      note: this.state.noteList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }), \"\\u2029\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sauhilfaraz/Desktop/Launch Training/notes-app/src/App.js"],"names":["React","Component","Notes","App","constructor","props","getNotes","e","setState","currentNote","note","target","value","getTitle","title","addNote","preventDefault","newItem","state","console","log","items","newItems","saveNote","titleList","noteList","clearNote","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport './Notes.js';\nimport Notes from './Notes.js';\n\n/* \nManage four variables with state:\n\"title, note, titleList, and noteList\"\n\nUse the titleList and noteList to keep track of and save\nall the notes the user writes down so we can display them\n*/\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      currentNote: {\n        title: \"\",\n        note: \"\"\n      }\n    };\n    this.getNotes = this.getNotes.bind(this);\n    this.getTitle = this.getTitle.bind(this);\n  }\n\ngetNotes = (e) => {\n  // let newNote = e.target.value; // Assigns the value of the 'e' parameter to 'newNote'\n  this.setState({\n    currentNote: {\n      note: e.target.value\n    }\n  });\n};\n\ngetTitle = (e) => {\n  // let newTitle = e.target.value; // Assigns the value of the 'e' parameter to 'newTitle'\n  this.setState({\n    currentNote: {\n      title: e.target.value\n    }\n  });\n};\n\naddNote = (e) => {\n  e.preventDefault();\n  const newItem = this.state.currentNote;\n  console.log(newItem);\n  if(newItem.title !== \"\" && newItem.note !== \"\"){\n    const items = [...this.state.items, newItems]\n    this.setState({\n      items : newItems,\n      currentNote:{\n        title:\"\",\n        note: \"\"\n      }\n    })\n  }\n}\n\nsaveNote = () => {\n  if(this.state.title !== \"\" && this.state.note !== \"\"){\n    this.setState({ \n      titleList: [this.state.titleList, this.state.title],\n      noteList: [this.state.noteList, this.state.note] \n    });\n    // this.setState({ noteList: [this.state.noteList, this.state.note] })\n  } \n};\n\nclearNote = () => {\n  if(this.state.note !== \"\" ){\n    this.setState({\n      note: \"\",\n      title: \"\"\n    });\n  }\n};\n\nrender() { \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        {/* Using the HTML tag 'h1' to create the application header */ }\n        <h1> Notes Application </h1>\n\n        {/* Using the HTML tag 'label' to create a label for the notes title */ }\n        <label> Title </label>\n\n        {/* Using the HTML tag 'input' to create a space for users to create a title for their note */ }\n        {/* Using 'onChange' because we input text and want the value to change as the text changes */ }\n        <input type=\"text\" id=\"textArea\" value={this.state.title}  onChange={e=>this.getTitle(e)}> \n        </input>\n\n        {/* Using the HTML tag 'textarea' to create the notes component */ }\n        {/* Using 'onChange' because we input text and want the value to change as the text changes */ }\n        <textarea id=\"noteArea\" value={this.state.note}  onChange={e=>this.getNotes(e)}>\n        </textarea>\n\n        {/* Create note, uses 'onClick' function to call the 'saveNote' function */ }\n        {/* Not sure if the button type should be 'submit' instead of 'button' */ }\n        <button type=\"submit\" onClick={()=>this.saveNote()}>\n          Save Note\n        </button>\n\n        {/* Clear note, uses 'onClick function to call the 'clearNote' function */ }\n        {/* Not sure if the button type should be 'reset' instead of 'button' */ }\n        <button type=\"submit\" onClick={()=>this.clearNote()}>\n          Clear Note\n        </button>\n      </header >\n\n      <Notes\n        title={this.state.titleList}\n        note={this.state.noteList}\n      /> \n\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}